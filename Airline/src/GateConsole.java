import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

// Generated by Together
/**
 * An interface to SAAMS: Gate Control Console: Inputs events from gate staff,
 * and displays aircraft and gate information. This class is a controller for
 * the GateInfoDatabase and the AircraftManagementDatabase: sends messages when
 * aircraft dock, have finished disembarking, and are fully emarked and ready to
 * depart. This class also registers as an observer of the GateInfoDatabase and
 * the AircraftManagementDatabase, and is notified whenever any change occurs in
 * those <<model>> elements. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements ActionListener, Observer {
    /**
     * The GateConsole interface has access to the GateInfoDatabase.
     *
     * @supplierCardinality 1
     * @clientCardinality 0..*
     * @label accesses/observes
     * @directed
     */
    private GateInfoDatabase gateInfoDatabase;

    /**
     * The GateConsole interface has access to the AircraftManagementDatabase.
     *
     * @supplierCardinality 1
     * @clientCardinality 0..*
     * @directed
     * @label accesses/observes
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    /**
     * This gate's gateNumber - for identifying this gate's information in the
     * GateInfoDatabase.
     */
    private int gateNumber;

    /*
     * Variables to hold Management Record Codes 
     */
    private int mCode;

    /*
     * GUI elements
     */
    private JButton dockedBtn;
    private JButton unloadedBtn;

    private JTextArea flightCodeDisplay = new JTextArea(1, 20);
    
    private JTextField passengerNameTf;
    private JButton addPassengerBtn;

    private JButton closeFlightBtn;
    
    private JTextArea description;

    /**
     * Constructor for GateConsole. Sets up variables and observer for aircraftManagementDatabase. Calls method to initialise GUI.
     */
    public GateConsole(GateInfoDatabase gateInfoDatabase, AircraftManagementDatabase aircraftManagementDatabase, int gateNumber) {
        this.gateInfoDatabase = gateInfoDatabase;
        this.aircraftManagementDatabase = aircraftManagementDatabase;
        aircraftManagementDatabase.addObserver(this);
        this.gateNumber = gateNumber;
        this.mCode = -1;
        initGUI();
    }

    /**
     * Initialise user interface
     */
    private void initGUI() {
        int gateTitle = gateNumber + 1;
        setTitle("Gate " + gateTitle + " Console");
        setSize(500, 310);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        //Set location based on what gate console this represents
        if (this.gateNumber == 0) {
            setLocation(1370, 10);
        } else if (this.gateNumber == 1) {
            setLocation(1370, 320);
        } else {
            setLocation(1370, 630);
        }

        JPanel jpGC = new JPanel();
        
        
        jpGC.add(flightCodeDisplay);

        //Docked Button
        dockedBtn = new JButton("Docked");
        dockedBtn.addActionListener(this);
        jpGC.add(dockedBtn);

        //Unloaded Button
        unloadedBtn = new JButton("Unloaded");
        unloadedBtn.addActionListener(this);
        jpGC.add(unloadedBtn);

        JLabel passengerNameLb = new JLabel("Passenger name: ");
        jpGC.add(passengerNameLb);
        passengerNameTf = new JTextField(15); //Field for entering new passengers
        jpGC.add(passengerNameTf);

        //Button that adds new passengers to flight
        addPassengerBtn = new JButton("Add Passenger");
        addPassengerBtn.addActionListener(this);
        jpGC.add(addPassengerBtn);

        //Button that closes the flight
        closeFlightBtn = new JButton("Close Flight");
        closeFlightBtn.addActionListener(this);
        jpGC.add(closeFlightBtn);
        
        description = new JTextArea(5, 20);
        jpGC.add(description);

        getContentPane().add(jpGC);
        setVisible(true);
        
        updateManagementRecord();

    }

    /**
     * Updates the ManagementRecord held and displayed by the gate console
     */
    private void updateManagementRecord() {
    	int currentStatus = gateInfoDatabase.getStatus(gateNumber);
    	if(currentStatus == Gate.FREE) {
    		flightCodeDisplay.setText("");
    		description.setText("");
    		mCode = -1;
    	} else {
    		mCode = gateInfoDatabase.getmCode(gateNumber);
        	flightCodeDisplay.setText(aircraftManagementDatabase.getFlightCode(mCode) + ": " + aircraftManagementDatabase.getStatusString(mCode));
    	}
    }

    @Override
    public void update(Observable arg0, Object arg1) {
        updateManagementRecord();
        if(mCode != -1) {
        	description.setText(aircraftManagementDatabase.getRecordDetails(mCode) + "\n" + createPassengerString(aircraftManagementDatabase.getPassengerList(mCode)));// output string with flight information and passengers on board
        } else {
        	description.setText("");
        	
        }
    }
    
    /**
     * Takes in the PassengerList and creates the output string for GateConsole
     * @param pList
     * @return String for output
     */
    private String createPassengerString(PassengerList pList) {
    	Vector<PassengerDetails> details = pList.getPassengerNames();
    	String names = "\nPassenger Names:";
    
    	for(int i = 0; i < details.size(); i++) {
    		names = names +"\n"+ details.get(i).getName();
    	}
    	return names;
    }

    /**
     * Establishes which button has been pressed and acts accordingly
     */
    @Override
    public void actionPerformed(ActionEvent evn) {
		 if (evn.getSource() == dockedBtn) 
	        docked();
	     else if (evn.getSource() == unloadedBtn) 
	        unloaded();
	     else if (evn.getSource() == addPassengerBtn) 
	        addPassenger();
	     else if (evn.getSource() == closeFlightBtn) 
	        closeFlight();
        
    }

    /**
     * Method called when Docked button is pressed.
     * Changes the status of the MR to Unloading then calls the docked method for GID which changes status of gate.
     */
    private void docked() {
        if (mCode==-1)  //Checks valid MR assigned to Gate
            JOptionPane.showMessageDialog(this, "No aircraft assigned to gate.");
        else if (aircraftManagementDatabase.getStatus(mCode) != ManagementRecord.TAXIING)//Checks valid state 
        	JOptionPane.showMessageDialog(this, "Invalid target for docking");   
        else { 
        	aircraftManagementDatabase.setStatus(mCode, ManagementRecord.UNLOADING);//Changes statuses
        	gateInfoDatabase.docked(gateNumber);
        }
            
    }

    /**
     * Method called when Unloaded button is pressed.
     * Changes the status of the MR to "Ready for cleaning and maintenance".
     */
    private void unloaded() {
        if (mCode==-1) 
            JOptionPane.showMessageDialog(this, "No aircraft assigned to gate.");
        else if (aircraftManagementDatabase.getStatus(mCode) != ManagementRecord.UNLOADING) 
        	JOptionPane.showMessageDialog(this, "Invalid target for clean & maintenance");
        else 
        	aircraftManagementDatabase.setStatus(mCode, ManagementRecord.READY_CLEAN_AND_MAINT);          
        }
    
    /**
     * Validates String added for Passenger before checking appropriate states. 
     * Checks flight capacity while adding passenger to list.
     */
    private void addPassenger() {
        String name = passengerNameTf.getText();
        // Only accept characters a-z and spaces 
        if (!name.matches("[a-zA-Z ]+")) {
        	JOptionPane.showMessageDialog(this, "Invalid passenger name");
        } else {
            
        	PassengerDetails details = new PassengerDetails(name);
            
            if (mCode == -1) //Checks valid mCode assigned to gate
                JOptionPane.showMessageDialog(this, "No aircraft assigned to gate.");
            else if (aircraftManagementDatabase.getStatus(mCode) != ManagementRecord.READY_PASSENGERS) //Checks in boarding phase
            	JOptionPane.showMessageDialog(this, "Aircraft not in boarding phase");
            else if (aircraftManagementDatabase.addPassenger(mCode, details)) //Checks if possible to add another passenger based on flight capacity.
                JOptionPane.showMessageDialog(this, "Flight at full capacity");
            else {
        	JOptionPane.showMessageDialog(this, "Passenger Added");
            	passengerNameTf.setText("");
            }
        }
   	}
    
    
    /**
     * Checks mCode and that Mrs state is ready to be changed to Ready to Depart
     */
    private void closeFlight() {
        if (mCode == -1) //Checks valid mCode assigned to gate
            JOptionPane.showMessageDialog(this, "No flight selected");
        else if (aircraftManagementDatabase.getStatus(mCode) != ManagementRecord.READY_PASSENGERS) //Checks that current state is appropriate
        	JOptionPane.showMessageDialog(this, "Flight not ready to be closed");
        else 
            aircraftManagementDatabase.setStatus(mCode, ManagementRecord.READY_DEPART);//Changes MR's status
            
    }
}


