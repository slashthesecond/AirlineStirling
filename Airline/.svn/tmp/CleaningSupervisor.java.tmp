import java.awt.Color;
import java.awt.Dimension;
import java.awt.List;
import java.awt.ScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together
/**
 * An interface to SAAMS: Cleaning Supervisor Screen: Inputs events from the
 * Cleaning Supervisor, and displays aircraft information. This class is a
 * controller for the AircraftManagementDatabase: sending it messages to change
 * the aircraft status information. This class also registers as an observer of
 * the AircraftManagementDatabase, and is notified whenever any change occurs in
 * that <<model>> element. See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer, ActionListener {
	/**
	 * The Cleaning Supervisor Screen interface has access to the
	 * AircraftManagementDatabase.
	 * 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase aircraftManagementDatabase;;

	JLabel AttentionCheckLb;
	JTextArea attentionTa;
	JLabel GateNoLb;
	JTextArea GateNoTa;
	JLabel StatusLb;
	JTextArea StatusTa;
	DefaultListModel<String> listModel;
 	JList<ManagementRecord> maintenanceRecordListView;
	JScrollPane scrollList;
	String currentCode;

	private AircraftManagementDatabase aircraftManagementDB;

	public CleaningSupervisor(AircraftManagementDatabase aircraftManagemnetDatabase) {
		setUpCSpanel();
		aircraftManagemnetDatabase.addObserver(this);
		this.aircraftManagementDB = aircraftManagemnetDatabase;
	}

	private void setUpCSpanel() {
		setUp();

		JPanel contentPanel = new JPanel();
		getContentPane().add(contentPanel);

		
		
		JLabel attentioncheckLb = new JLabel("Aircrafts that require attention: ");
		contentPanel.add(attentioncheckLb);
		attentionTa = new JTextArea();
		contentPanel.add(attentionTa);

		// GateNoLb = new JLabel("Gate Numbers: ");
		// jpAircraftAttention.add(GateNoLb);
		// GateNoTa = new JTextArea();
		// jpAircraftAttention.add(GateNoTa);

		//

//		StatusLb = new JLabel("Status: ");
//		contentPanel.add(StatusLb);
//		StatusTa = new JTextArea();
//		contentPanel.add(StatusTa);
//		
//		contentPanel.add(new JLabel("HI!"));
		

		listModel = new DefaultListModel<>();
		
		

		maintenanceRecordListView = new JList<ManagementRecord>(new DefaultListModel<ManagementRecord>());
		maintenanceRecordListView.setVisibleRowCount(10);
		
		maintenanceRecordListView.setPreferredSize(new Dimension(300, 300));
	
		contentPanel.add(new JScrollPane(maintenanceRecordListView));

		
//		listModel.addElement("HI!");
		

		pack();

	}

	private void setUp() {
		setTitle("Cleaning Supervisor");
		setVisible(true);
		setSize(550, 300);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	private void updatemaintenanceRecord() {
		// TODO Auto-generated method stub

	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto-generated method stub
		
<<<<<<< .mine
		
		
		
//		System.out.println("I received the update request.");
//
//		ArrayList<Integer> results = new ArrayList<>();
//
//		for (int i = 0; i < aircraftManagementDB.maxMRs; i++) {
//			int currentStatus = aircraftManagementDB.getStatus(i);
//
//			// if(currentStatus == ManagementRecord.AWAIT_REPAIR)) {
//			listModel.addElement(aircraftManagementDB.getFlightCode(i));
//			
//			// }
//		}
//
//	}
		
=======
		ManagementRecord[] okClean = aircraftManagementDatabase.getWithStatus(ManagementRecord.OK_AWAIT_CLEAN);
		maintenanceRecordListView.setListData(okClean);
		
		System.out.println("I received the update request.");

		ArrayList<Integer> results = new ArrayList<>();

		for (int i = 0; i < aircraftManagementDB.maxMRs; i++) {
			int currentStatus = aircraftManagementDB.getStatus(i);

			// if(currentStatus == ManagementRecord.AWAIT_REPAIR)) {
			listModel.addElement(aircraftManagementDB.getFlightCode(i));
>>>>>>> .r43
			
		
	

}
