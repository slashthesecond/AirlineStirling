import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together
// Edited by Nganga Njiraini

/**
 * An interface to SAAMS:
 * Maintenance Inspector Screen:
 * Inputs events from the Maintenance Inspector, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements Observer, ActionListener{
	/**  The Maintenance Inspector Screen interface has access to the AircraftManagementDatabase. 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed*/
  private AircraftManagementDatabase amd;
  /** The GateConsole interface has access to the GateInfoDatabase.* 
	 * @supplierCardinality 1
	 * @clientCardinality 0..*
	 * @label accesses/observes
	 * @directed
	 */
  private GateInfoDatabase gid;
  
  private ArrayList<Integer> mCodes1;
  private ArrayList<Integer>mCodes2;
  private JTabbedPane tabPanel;
  
  private JLabel lblMaintain;
  private JList<String> maintainList;
  private JScrollPane mScroll;
  private JLabel lblInfo;

  private JTextArea AircraftStatus;
  
  private JButton faultCheck;
  private boolean newfault = false;
  private JTextArea faultDescription;
  private JButton completeMaintenance;
  
  private JList<String> faultyList;
  private JLabel lblfList;
  private JScrollPane fScroll;
  private JButton finishRepair;
  public MaintenanceInspector(AircraftManagementDatabase amd) {
	  mCodes1 = new ArrayList<Integer>();
	  mCodes2 = new ArrayList<Integer>();
	  amd.addObserver(this);
	  this.amd = amd;
	  initGUI();
  }
  
  private void initGUI() {
	  tabPanel = new JTabbedPane();
	  getContentPane().add(tabPanel);
	  initTab1();
	  initTab2();
	  
	  setTitle("Maintenance Inspector");
	  setVisible(true);
	  setSize(550, 350);
	  setLocation(650, 600);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
  }
  
  private void initTab1() {
	  JPanel maintainPanel = new JPanel();
	  maintainPanel.setLayout(new BoxLayout(maintainPanel, BoxLayout.PAGE_AXIS));
	  maintainPanel.add(Box.createRigidArea(new Dimension(0,5)));
	  
	  lblMaintain = new JLabel("Ready for Maintenance");
	  maintainList = new JList<String>(new DefaultListModel<String>());
	  mScroll = new JScrollPane(maintainList);
	  maintainList.setVisibleRowCount(amd.maxMRs);
	  maintainList.addListSelectionListener(new ListSelectionListener() {
		@Override
		public void valueChanged(ListSelectionEvent arg0) {
			if(!(maintainList.getSelectedIndex() == -1)) {
				int i = maintainList.getSelectedIndex();
				AircraftStatus.setText(amd.getRecordDetails(mCodes1.get(i)));
			}
		} 
	  });
	  
	  lblInfo = new JLabel("Aircraft Info");
	  AircraftStatus = new JTextArea();
	  
	  completeMaintenance = new JButton("Complete Maintenance");
	  completeMaintenance.addActionListener(this);
	 
	  maintainPanel.add(lblMaintain);
	  maintainPanel.add(mScroll);
	  maintainPanel.add(lblInfo);
	  maintainPanel.add(AircraftStatus);
	  maintainPanel.add(completeMaintenance);
	  
	  JPanel faultPanel = new JPanel();
	  faultPanel.setLayout(new BoxLayout(faultPanel, BoxLayout.PAGE_AXIS));
	  
	  faultPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
	  faultCheck = new JButton("Report Fault");
	  faultCheck.addActionListener(this);
	  
	  faultDescription = new JTextArea(5, 10);
	  faultDescription.setLineWrap(true);
	  faultDescription.setWrapStyleWord(true);
	  JScrollPane jsp = new JScrollPane(faultDescription);
	  
	  faultPanel.add(faultCheck);
	  faultPanel.add(jsp);
	  
	  JPanel panel = new JPanel();
	  panel.setLayout(new GridLayout(1, 2));
	  panel.add(maintainPanel);
	  panel.add(faultPanel);
	  tabPanel.addTab("Maintenance", panel);
  }
  
  private void initTab2() {
	  JPanel faultDesPanel = new JPanel();
	  faultDesPanel.setLayout(new BoxLayout(faultDesPanel, BoxLayout.PAGE_AXIS));
	  faultDesPanel.add(Box.createRigidArea(new Dimension(0,5)));
	  
	  lblfList = new JLabel("Aircraft requiring repair");
	  faultyList = new JList<String>(new DefaultListModel<String>());
	  fScroll = new JScrollPane(faultyList);
	  faultyList.setFixedCellWidth(400);
	  
	  finishRepair = new JButton("Complete Repair for selected aircraft");
	  finishRepair.addActionListener(this);
	  faultDesPanel.add(lblfList);
	  faultDesPanel.add(fScroll);
	  faultDesPanel.add(finishRepair);
	  
	  tabPanel.addTab("Fault Repiars", faultDesPanel);
  }
  
  @Override
  public void actionPerformed(ActionEvent evn) {
	  if (evn.getSource() == completeMaintenance) {
		  int index = maintainList.getSelectedIndex();
		  if (maintainList.getSelectedIndex() == -1) {
			  JOptionPane.showMessageDialog(this,"Please Select an Aircraft");
		  } 
		  if (amd.getStatus(mCodes1.get(index)) == ManagementRecord.READY_CLEAN_AND_MAINT) {
			  amd.setStatus(mCodes1.get(index), ManagementRecord.OK_AWAIT_CLEAN);
		  } else if (amd.getStatus(mCodes1.get(index)) == ManagementRecord.CLEAN_AWAIT_MAINT) {
			  amd.setStatus(mCodes1.get(index), ManagementRecord.READY_REFUEL);
		  }
	  }
	  
	  if (evn.getSource() == faultCheck) {
		  int index = maintainList.getSelectedIndex();
		  
		  String description = faultDescription.getText();
		  if (maintainList.getSelectedIndex() == -1) {
			  JOptionPane.showMessageDialog(this,"No Aircraft Selected");
		  }
		  amd.faultsFound(index, description);
		  
	  }
	  
	  if (evn.getSource() == finishRepair) {
		  int index = faultyList.getSelectedIndex();
		  if (faultyList.getSelectedIndex() == -1) {
			  JOptionPane.showMessageDialog(this,"No Aircraft Selected");
		  }
		  
		  if (amd.getStatus(mCodes2.get(index)) == ManagementRecord.FAULTY_AWAIT_CLEAN) {
			  amd.setStatus(mCodes2.get(index), ManagementRecord.AWAIT_REPAIR);
		  } else if (amd.getStatus(mCodes2.get(index)) == ManagementRecord.AWAIT_REPAIR) {
			  amd.setStatus(mCodes2.get(index), ManagementRecord.READY_CLEAN_AND_MAINT);
		  }
	  }
  }
  
  @Override
  public void update(Observable arg0, Object arg1) {
	  updateMaintenanceList();
	  updateFaultyList();
  }
  
  private void updateMaintenanceList() {
	  mCodes1.clear();
	  mCodes1.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.READY_CLEAN_AND_MAINT)));
	  mCodes1.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.CLEAN_AWAIT_MAINT)));
	  
	  String[] flightCodes = new String[mCodes1.size()];
	  for(int i = 0; i < mCodes1.size(); i++) {
		  flightCodes[i] = amd.getFlightCode(mCodes1.get(i)) + " :" +amd.getStatusString(mCodes1.get(i)); 
	  }
	  
	  maintainList.setListData(flightCodes);
	  maintainList.updateUI();
  }
  
  private void updateFaultyList() {
	  mCodes2.clear();
	  mCodes2.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.FAULTY_AWAIT_CLEAN)));
	  mCodes2.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.AWAIT_REPAIR)));
	  
	  String[] flightCodes = new String[mCodes2.size()];
	  for(int i = 0; i < mCodes2.size(); i++) {
		  flightCodes[i] = amd.getFlightCode(mCodes2.get(i)) + " :" +amd.getStatusString(mCodes2.get(i)); 
	  }
	  
	  faultyList.setListData(flightCodes);
	  faultyList.updateUI();
  }
  
}
