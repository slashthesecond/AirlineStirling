import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together


/**
 * An interface to SAAMS:
 * A Ground Operations Controller Screen:
 * Inputs events from GOC (a person), and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sending them messages to change the gate or aircraft status information.
 * This class also registers as an observer of the GateInfoDatabase and the AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id2wdkkcko4qme4cko4svm2.node36
 * @url element://model:project::SAAMS/design:view:::id2wdkkcko4qme4cko4svm2
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1bl79cko4qme4cko4sw5j
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 */
public class GOC extends JFrame implements Observer, ActionListener {
    /**
     * The Ground Operations Controller Screen interface has access to the GateInfoDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private GateInfoDatabase gateInfoDatabase;
    /**
     * The Ground Operations Controller Screen interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    private JButton nextStateButton;
    private JTextArea flightDescriptionArea = new JTextArea(6, 35);

    private ArrayList<Integer> mCodeList;
    private JList<String> flightCodeList;
    private JList<String> gateList;

    public GOC(AircraftManagementDatabase aircraftManagementDatabase, GateInfoDatabase gateInfoDatabase) {
        this.aircraftManagementDatabase = aircraftManagementDatabase;
        this.aircraftManagementDatabase.addObserver(this);
        this.gateInfoDatabase = gateInfoDatabase;
        this.gateInfoDatabase.addObserver(this);
        initGUI();
    }

    private void initGUI() {
        setTitle("GOC");
        setVisible(true);
        setSize(400, 475);
        setLocation(940, 10);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        JPanel jpGOC = new JPanel();
        getContentPane().add(jpGOC);
        jpGOC.setLayout(new FlowLayout());

        JLabel flightCodeListLb = new JLabel("Aircraft List");
        jpGOC.add(flightCodeListLb);

        flightCodeList = new JList<String>(new DefaultListModel<String>());
        flightCodeList.setFixedCellWidth(350);
        flightCodeList.setVisibleRowCount(aircraftManagementDatabase.maxMRs);
        //Updates flightDescriptionArea when a flight is selected
        flightCodeList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent arg0) {
                if (!(flightCodeList.getSelectedIndex() == -1)) {
                    int i = flightCodeList.getSelectedIndex();
                    flightDescriptionArea.setText(aircraftManagementDatabase.getRecordDetails(mCodeList.get(i)));
                }

            }
        });
        JScrollPane aircraftScrollList = new JScrollPane(flightCodeList);
        jpGOC.add(aircraftScrollList);

        nextStateButton = new JButton("Next Phase");
        nextStateButton.addActionListener(this);
        jpGOC.add(nextStateButton);

        jpGOC.add(flightDescriptionArea);

        JLabel gateListLb = new JLabel("Gates");
        jpGOC.add(gateListLb);
        gateList = new JList<String>(new DefaultListModel<String>());
        gateList.setFixedCellWidth(350);
        gateList.setVisibleRowCount(gateInfoDatabase.maxGateNumber);
        JScrollPane gateScrollList = new JScrollPane(gateList);
        jpGOC.add(gateScrollList);

        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent evn) {

        if (evn.getSource() == nextStateButton) {

            if (flightCodeList.getSelectedIndex() == -1)
                JOptionPane.showMessageDialog(this, "Please select an aircraft");
            else {
                int mCode = mCodeList.get(flightCodeList.getSelectedIndex());
                int statusCode = aircraftManagementDatabase.getStatus(mCode);
                if (statusCode == ManagementRecord.WANTING_TO_LAND) {
                    aircraftManagementDatabase.setStatus(mCode, statusCode + 1);
                    flightDescriptionArea.setText("Successfully changed status.");
                } else if (statusCode == ManagementRecord.LANDED) {
                    if (gateList.getSelectedIndex() == -1) {
                        JOptionPane.showMessageDialog(this, "No gate selected");
                    } else {
                        int gateNumber = gateList.getSelectedIndex();
                        if (gateInfoDatabase.getStatus(gateNumber) == Gate.FREE) {
                            gateInfoDatabase.allocate(gateNumber, mCode);
                            aircraftManagementDatabase.taxiTo(mCode, gateNumber);
                        } else {
                            JOptionPane.showMessageDialog(this, "Gate reservered");
                        }
                    }

                } else if (statusCode == ManagementRecord.AWAITING_TAXI) {
                    gateInfoDatabase.departed(aircraftManagementDatabase.getGateNumber(mCode));
                    aircraftManagementDatabase.setStatus(mCode, ManagementRecord.AWAITING_TAKEOFF);
                } else {
                    JOptionPane.showMessageDialog(this, "GOC does not have permission to  \nchange the status of flights in phase: \n" + aircraftManagementDatabase.getStatusString(mCode));
                }
            }
        }

    }

    @Override
    public void update(Observable o, Object arg) {
        flightCodeList.setSelectedIndex(-1);
        gateList.setSelectedIndex(-1);
        flightDescriptionArea.setText("");

        updateAircraft();

        updateGates();


    }

    private void updateAircraft() {
        mCodeList = getGOCmCodes();

        String[] flightCodes = new String[mCodeList.size()];
        for (int i = 0; i < mCodeList.size(); i++) {
            flightCodes[i] = aircraftManagementDatabase.getFlightCode(mCodeList.get(i)) + " - " + aircraftManagementDatabase.getStatusString(mCodeList.get(i));
        }

        flightCodeList.setListData(flightCodes);
        // Update size of display
        flightCodeList.updateUI();
    }

    private void updateGates() {

        String[] outputArr = new String[gateInfoDatabase.maxGateNumber];

        for (int i = 0; i < gateInfoDatabase.maxGateNumber; i++) {
            int gateNumber = i + 1;
            outputArr[i] = "Gate " + gateNumber + " - " + gateInfoDatabase.getStatusString(i);
        }

        gateList.setListData(outputArr);
        gateList.updateUI();
    }

    private ArrayList<Integer> getGOCmCodes() {
        ArrayList<Integer> mCodes = new ArrayList<Integer>();

        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDED)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.TAXIING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.UNLOADING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_CLEAN_AND_MAINT)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.FAULTY_AWAIT_CLEAN)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.OK_AWAIT_CLEAN)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAIT_REPAIR)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_REFUEL)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_PASSENGERS)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_DEPART)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAITING_TAXI)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAITING_TAKEOFF)));

        return mCodes;
    }


}
