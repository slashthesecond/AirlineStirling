// Generated by Together

/**
 * An individual aircraft management record: Either FREE or models an aircraft
 * currently known to SAAMS. See MRState diagram for operational details, and
 * written documentation. This class has public static int identifiers for the
 * individual status codes. An MR may be "FREE", or may contain a record of the
 * status of an individual aircraft under the management of SAAMS. An instance
 * of AircraftManagementDatabase holds a collection of ManagementRecords, and
 * sends the ManagementRecords messages to control/fetch their status.
 * 
 * @stereotype entity
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node152
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node171
 * @url element://model:project::SAAMS/design:view:::id2wdkkcko4qme4cko4svm2
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:node:::id2wdkkcko4qme4cko4svm2.node41
 */
public class ManagementRecord {

	/**
	 * Status code: This MR is currently not managing any aircraft information
	 *
	 * See MRState diagram.
	 */
	public static final int FREE = 0;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int IN_TRANSIT = 1;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int WANTING_TO_LAND = 2;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int GROUND_CLEARANCE_GRANTED = 3;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int LANDING = 4;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int LANDED = 5;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int TAXIING = 6;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int UNLOADING = 7;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int READY_CLEAN_AND_MAINT = 8;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int FAULTY_AWAIT_CLEAN = 9;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int OK_AWAIT_CLEAN = 11;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int CLEAN_AWAIT_MAINT = 10;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int AWAIT_REPAIR = 12;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int READY_REFUEL = 13;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int READY_PASSENGERS = 14;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int READY_DEPART = 15;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int AWAITING_TAXI = 16;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int AWAITING_TAKEOFF = 17;

	/**
	 * Status code
	 *
	 * See MRState diagram.
	 */
	public static final int DEPARTING_THROUGH_LOCAL_AIRSPACE = 18;

	/** The status code for this ManagementRecord. */
	private int status;

	/**
	 * The gate number allocated to this aircraft, when there is one.
	 */
	private int gateNumber;

	/**
	 * A short string identifying the flight:
	 *
	 * Usually airline abbreviation plus number, e.g. BA127. Obtained from the
	 * flight descriptor when the aircraft is first detected.
	 *
	 * This is the code used in timetables, and is useful to show on public
	 * information screens.
	 */
	private String flightCode;

	/**
	 * Holds the aircraft's itinerary. Downloaded from the flight descriptor when
	 * the aircraft is first detected.
	 * 
	 * @clientCardinality 1
	 * @directed true
	 * @label contains
	 * @shapeType AggregationLink
	 * @supplierCardinality 1
	 */
	private Itinerary itinerary;

	/**
	 * The list of passengers on the aircraft. Incoming flights supply their
	 * passenger list in their flight decsriptor. Outbound flights have passenger
	 * lists built from passenger details supplied by the gate consoles.
	 * 
	 * @clientCardinality 1
	 * @directed true
	 * @label contains
	 * @shapeType AggregationLink
	 * @supplierCardinality 1
	 */
	private PassengerList passengerList;

	/**
	 * Contains a description of what is wrong with the aircraft if it is found to
	 * be faulty during maintenance inspection.
	 */
	private String faultDescription;

	/**
	 * Constructor for Management Record Initialises status to FREE
	 */
	public ManagementRecord() {
		setStatus(ManagementRecord.FREE);
		faultDescription = "";
	}

	/**
	 * Request to set the MR into a new status.
	 *
	 * Only succeeds if the state change conforms to the MRState diagram.
	 *
	 * This is a general purpose state change request where no special details
	 * accompany the state change. [Special status changers are, for example,
	 * "taxiTo", where a gate number is supplied.]
	 * 
	 * @preconditions Valid transition requested
	 */
	public void setStatus(int newStatus) {
		this.status = newStatus;
		if(newStatus == READY_CLEAN_AND_MAINT) {
			this.passengerList.empty();
		}
	}

	/**
	 * Return the status code of this MR.
	 */
	public int getStatus() {
		return this.status;
	}

	/**
	 * Return the flight code of this MR.
	 */
	public String getFlightCode() {
		return this.flightCode;
	}

	/**
	 * Sets up the MR with details of newly detected flight
	 *
	 * Status must be FREE now, and becomes either IN_TRANSIT or WANTING_TO_LAND
	 * depending on the details in the flight descriptor.
	 * 
	 * @preconditions Status is FREE
	 */
	public void radarDetect(FlightDescriptor fd) {
		this.flightCode = fd.getFlightCode();
		this.itinerary = fd.getItinerary();
		this.passengerList = fd.getPassengerList();
		if (itinerary.getTo().toLowerCase().equals("stirling")) {
			this.status = ManagementRecord.WANTING_TO_LAND;
		} else {
			this.status = ManagementRecord.IN_TRANSIT;
		}
	}

	/**
	 * This aircraft has departed from local airspace.
	 *
	 * Status must have been either IN_TRANSIT or DEPARTING_THROUGH_LOCAL_AIRSPACE,
	 * and becomes FREE (and the flight details are cleared).
	 * 
	 * @preconditions Status is IN_TRANSIT or DEPARTING_THROUGH_LOCAL_AIRSPACE
	 */
	public void radarLostContact() {
		this.status = ManagementRecord.FREE;
		this.itinerary = null;
		this.passengerList = null;
		this.flightCode = "";
		this.faultDescription="";
	}

	/**
	 * GOC has allocated the given gate for unloading passengers.
	 *
	 * The gate number is recorded.The status must have been LANDED and becomes
	 * TAXIING.
	 * 
	 * @preconditions Status is LANDED
	 */
	public void taxiTo(int gateNumber) {
		this.gateNumber = gateNumber;
		this.status = ManagementRecord.TAXIING;
	}

	/**
	 * The Maintenance Supervisor has reported faults.
	 *
	 * The problem description is recorded.
	 *
	 * The status must have been READY_FOR_CLEAN_MAINT or CLEAN_AWAIT_MAINT and
	 * becomes FAULTY_AWAIT_CLEAN or AWAIT_REPAIR respectively.
	 * 
	 * @preconditions Status is READY_FOR_CLEAN_MAINT or CLEAN_AWAIT_MAINT
	 */
	public void faultsFound(String description) {
		if (this.status == ManagementRecord.READY_CLEAN_AND_MAINT) {
			this.status = ManagementRecord.FAULTY_AWAIT_CLEAN;
		} else {
			this.status = ManagementRecord.AWAIT_REPAIR;
		}
		this.faultDescription = description;
	}

	/**
	 * The given passenger is boarding this aircraft.
	 *
	 * Their details are recorded in the passengerList.
	 *
	 * For this operation to be applicable, the status must be READY_PASSENGERS, and
	 * it doesn't change.
	 * 
	 * @preconditions Status is READY_PASSENGERS
	 */
	public boolean addPassenger(PassengerDetails details) {
		boolean max = this.passengerList.maxCapacity();
		if(!max)
			this.passengerList.addPassenger(details);
		
		return max; 
	}

	/** Return the entire current PassengerList. */
	public PassengerList getPassengerList() {
		return this.passengerList;
	}

	/** Return the aircraft's Itinerary. */
	public Itinerary getItinerary() {
		return this.itinerary;
	}

	public String toString() {
		return "Flight:    " + flightCode;
	}
	
	public String getDetails() {
		String statusString = getStatusString();
		String fault = "";
		if(!faultDescription.equals("")){
			fault = "\nFault: " + faultDescription;
		}
		
		return "Flight: " + flightCode + "\nStatus: " + statusString +"\nFrom: "
				+ itinerary.getFrom() + "\nTo: " + itinerary.getTo()
				+"\nPassengers: " + passengerList.size() + fault;
	}
	
	public int getGateNumber() {
		return this.gateNumber;
	}
	
	public String getStatusString() {
		String statusString = "";
		switch (this.status) {
		case FREE:
			statusString = "Free";
			break;
		case IN_TRANSIT:
			statusString = "In transit";
			break;
		case WANTING_TO_LAND:
			statusString = "Wanting to land";
			break;
		case GROUND_CLEARANCE_GRANTED:
			statusString = "Ground clearance granted";
			break;
		case LANDING:
			statusString = "Landing";
			break;
		case LANDED:
			statusString = "Landed";
			break;
		case TAXIING:
			statusString = "Taxiing";
			break;
		case UNLOADING:
			statusString = "Unloading";
			break;
		case READY_CLEAN_AND_MAINT:
			statusString = "Ready for cleaning and maintinance";
			break;
		case CLEAN_AWAIT_MAINT:
			statusString = "Clean and ready for maintinance";
			break;
		case FAULTY_AWAIT_CLEAN:
			statusString = "Faulty, awaiting clean";
			break;
		case OK_AWAIT_CLEAN:
			statusString = "Ok, awaiting clean";
			break;
		case AWAIT_REPAIR:
			statusString = "Awaiting repair";
			break;
		case READY_REFUEL:
			statusString = "Ready for refuel";
			break;
		case READY_PASSENGERS:
			statusString = "Ready for passenger boarding";
			break;
		case READY_DEPART:
			statusString = "Ready to depart";
			break;
		case AWAITING_TAXI:
			statusString = "Awaiting taxi";
			break;
		case AWAITING_TAKEOFF:
			statusString = "Awaiting takeoff";
			break;
		case DEPARTING_THROUGH_LOCAL_AIRSPACE:
			statusString = "Departing through local airspace";
			break;
		}
		return statusString;
	}

    public void repair() {
	    this.faultDescription = "";
    }
}
