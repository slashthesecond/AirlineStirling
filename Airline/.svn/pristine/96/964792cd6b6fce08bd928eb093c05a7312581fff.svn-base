import java.awt.FlowLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

// Generated by Together


/**
 * An interface to SAAMS:
 * Local Air Traffic Controller Screen:
 * Inputs events from LATC (a person), and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id2fh3ncko4qme4cko4swe5
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 */
public class LATC extends JFrame implements Observer, ActionListener {
/**
  *  The Local Air Traffic Controller Screen interface has access to the AircraftManagementDatabase.
  * @supplierCardinality 1
  * @clientCardinality 1
  * @label accesses/observes
  * @directed*/
	private AircraftManagementDatabase amd;
	
	private JLabel managementRecordListLb;
	private JList<ManagementRecord> managementRecordList;
	private JScrollPane scrollList;
	private JButton viewInfoButton;
	private JButton nextStateButton;
	private JTextArea flightDescriptionArea  = new JTextArea(5,20);
	  
	public LATC(AircraftManagementDatabase amd) {
		  amd.addObserver(this);
		  this.amd = amd;
		  initGUI();
	}
	
	private void initGUI() {
		setTitle("LATC");
		setVisible(true);
		setSize(330, 390);
		setLocation(400, 400);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		
		JPanel jpLATC = new JPanel();
		getContentPane().add(jpLATC);
		jpLATC.setLayout(new FlowLayout());
		
		managementRecordListLb = new JLabel("Aircraft List");
		jpLATC.add(managementRecordListLb);
		
		managementRecordList = new JList<ManagementRecord>(new DefaultListModel<ManagementRecord>());
		managementRecordList.setFixedCellWidth(300);
		managementRecordList.setVisibleRowCount(amd.maxMRs);
		scrollList = new JScrollPane(managementRecordList);
		jpLATC.add(scrollList);
		
		viewInfoButton = new JButton("View Flight Information");
		viewInfoButton.addActionListener(this);
		jpLATC.add(viewInfoButton);
		
		nextStateButton = new JButton("Next Phase");
		nextStateButton.addActionListener(this);
		jpLATC.add(nextStateButton);
		
		jpLATC.add(flightDescriptionArea);

	}

	@Override
	public void actionPerformed(ActionEvent evn) {
		if(evn.getSource() == viewInfoButton) {
			if(managementRecordList.getSelectedIndex() == -1)
				flightDescriptionArea.setText("Please select an Aircraft");
			else 
				flightDescriptionArea.setText(managementRecordList.getSelectedValue().getDetails());
		}
		
		if(evn.getSource() == nextStateButton) {
			if(managementRecordList.getSelectedIndex() == -1)
				flightDescriptionArea.setText("Please select an Aircraft");
			else {
				ManagementRecord mr = managementRecordList.getSelectedValue();
				managementRecordList.getSelectedValue().setStatus(mr.getStatus()+1);
				flightDescriptionArea.setText("Successfully changed status.");
			}
		}
		
	}
	
	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		
		ManagementRecord[] mrs = getLATCManagementRecords();
		
		managementRecordList.setListData(mrs);
		// Update size of display
		managementRecordList.updateUI();
		
	}
	
	private ManagementRecord[] getLATCManagementRecords() {
		ArrayList<Integer> mrs = new ArrayList<Integer>();
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.IN_TRANSIT)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.WANTING_TO_LAND)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.LANDING)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.READY_DEPART)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.AWAITING_TAXI)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.AWAITING_TAKEOFF)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.DEPARTING_THROUGH_LOCAL_AIRSPACE)));
		
		
		return mrs.toArray(new ManagementRecord[mrs.size()]);
	}

}
