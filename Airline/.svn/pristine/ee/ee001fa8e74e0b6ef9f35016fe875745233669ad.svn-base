import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together

/**
 * An interface to SAAMS: Radar tracking of arriving and departing aircraft, and
 * transceiver for downloading of flight descriptors (by aircraft entering the
 * local airspace) and uploading of passenger lists (to aircraft about to
 * depart). A screen simulation of the radar/transceiver system. This class is a
 * controller for the AircraftManagementDatabase: it sends messages to notify
 * when a new aircraft is detected (message contains a FlightDescriptor), and
 * when radar contact with an aircraft is lost. It also registers as an observer
 * of the AircraftManagementDatabase, and is notified whenever any change occurs
 * in that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node167
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class RadarTransceiver extends JFrame implements Observer, ActionListener {
    /**
     * The Radar Transceiver interface has access to the AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase amd;

    /*
     * GUI components
     */
    private JTabbedPane jtp;

    //Text fields for flight info
    private JTextField flightCodeTf;
    private JTextField fromTf;
    private JTextField toTf;
    private JTextField nextTf;
    //Components for dealing with passengers
    private JTextField addPassengerTf;
    private JButton addPassengerBtn;
    private JButton deletePassengerBtn;
    private JList<PassengerDetails> addedPassengersList;
    private JScrollPane scrollList;
    //Button to finish flight descriptor
    private JButton addFlightDescriptor;

    //Components for dealing with flight records
    private JList<String> managementRecordList;
    private JTextArea description;
    private JButton clearRecord;

    /*
     * List of passengers for current flight descriptor
     */
    private PassengerList passengers;

    private ArrayList<Integer> mCodes;

    public RadarTransceiver(AircraftManagementDatabase aircraftManagementDatabase) {
        mCodes = new ArrayList<Integer>();
        passengers = new PassengerList();
        aircraftManagementDatabase.addObserver(this);
        this.amd = aircraftManagementDatabase;

        initGUI();
    }

    /*
        Sets up a GUI with two tabs
     */
    private void initGUI() {
        setTitle("Radar Transceiver");
        setVisible(true);
        setSize(570, 300);
        setLocation(10, 10);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jtp = new JTabbedPane();
        getContentPane().add(jtp);

        initPanel1();
        initPanel2();
    }

    /*
     * Sets up the first tab which will be used for entering flight details
     */
    private void initPanel1() {
        JPanel jpEnterFlightRecord = new JPanel();
        jpEnterFlightRecord.setLayout(new BoxLayout(jpEnterFlightRecord, BoxLayout.LINE_AXIS));
        jpEnterFlightRecord.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JLabel flightCodeLb = new JLabel("Flight code: ");
        jpEnterFlightRecord.add(flightCodeLb);

        flightCodeTf = new JTextField(10);
        flightCodeTf.setMaximumSize(flightCodeTf.getPreferredSize() );
        jpEnterFlightRecord.add(flightCodeTf);

        JLabel fromLb = new JLabel("From: ");
        jpEnterFlightRecord.add(fromLb);

        fromTf = new JTextField(10);
        fromTf.setMaximumSize(fromTf.getPreferredSize());
        jpEnterFlightRecord.add(fromTf);

        JLabel toLb = new JLabel("To: ");
        jpEnterFlightRecord.add(toLb);

        toTf = new JTextField(10);
        toTf.setMaximumSize(toTf.getPreferredSize());
        jpEnterFlightRecord.add(toTf);

        JLabel nextLb = new JLabel("Next: ");
        jpEnterFlightRecord.add(nextLb);

        nextTf = new JTextField(10);
        nextTf.setMaximumSize(nextTf.getPreferredSize());
        jpEnterFlightRecord.add(nextTf);
        
        /******************************/
        JPanel jpNewPassengers = new JPanel();
        jpNewPassengers.setLayout(new BoxLayout(jpNewPassengers, BoxLayout.LINE_AXIS));
        jpNewPassengers.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        JLabel addPassengerLb = new JLabel("Passenger: ");
        jpNewPassengers.add(addPassengerLb);
        addPassengerTf = new JTextField(20);
        addPassengerTf.setMaximumSize(addPassengerTf.getPreferredSize());
        jpNewPassengers.add(addPassengerTf);
        jpNewPassengers.add(Box.createRigidArea(new Dimension(10, 0)));
        deletePassengerBtn = new JButton("Delete");
        deletePassengerBtn.addActionListener(this);
        jpNewPassengers.add(deletePassengerBtn);
        jpNewPassengers.add(Box.createRigidArea(new Dimension(10, 0)));
        addPassengerBtn = new JButton("Add");
        addPassengerBtn.addActionListener(this);
        jpNewPassengers.add(addPassengerBtn);
        
        /************************************/
        JPanel jpShowPassengers = new JPanel();
        jpShowPassengers.setLayout(new BoxLayout(jpShowPassengers, BoxLayout.PAGE_AXIS));
        jpShowPassengers.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        addedPassengersList = new JList<PassengerDetails>(new DefaultListModel<PassengerDetails>());
        addedPassengersList.setFixedCellWidth(300); // Stops resizing when changing tabs
        scrollList = new JScrollPane(addedPassengersList);
        addedPassengersList.setVisibleRowCount(5);
        addedPassengersList.setMaximumSize(addedPassengersList.getPreferredSize());
        jpShowPassengers.add(scrollList);
        updateAddedPassengersList();
        jpShowPassengers.add(Box.createRigidArea(new Dimension(0, 10)));
        addFlightDescriptor = new JButton("Finish Flight Descriptor");
        addFlightDescriptor.setAlignmentX(CENTER_ALIGNMENT);
        addFlightDescriptor.addActionListener(this);
        jpShowPassengers.add(addFlightDescriptor);
        
        /************************************/
        JPanel jpMainPanel = new JPanel();
        jpMainPanel.setLayout(new BorderLayout());
        
        JPanel jpTxtBoxes = new JPanel();
        jpTxtBoxes.setLayout(new GridLayout(2,1));
        jpTxtBoxes.add(jpEnterFlightRecord);
        jpTxtBoxes.add(jpNewPassengers);
        
        jpMainPanel.add(jpTxtBoxes, BorderLayout.CENTER);
        jpMainPanel.add(jpShowPassengers, BorderLayout.SOUTH);
        jtp.addTab("Enter Flight Record", jpMainPanel);
    }

    /*
        Sets up the second tab which will be used to view the relevant flights:
        (In transit, Wanting to land, Departing through local air space)
     */
    private void initPanel2() {
        JPanel jpViewFlightRecords = new JPanel();
        jtp.addTab("Flight records", jpViewFlightRecords);

        managementRecordList = new JList<String>(new DefaultListModel<>());
        scrollList = new JScrollPane(managementRecordList);
        managementRecordList.setVisibleRowCount(amd.maxMRs);
        // Stops resizing when changing tabs
        managementRecordList.setFixedCellWidth(200);
        //Update the description text area when a flight is selected
        managementRecordList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent arg0) {
                if (!(managementRecordList.getSelectedIndex() == -1)) {
                    int mCodeIndex = managementRecordList.getSelectedIndex();
                    description.setText(amd.getRecordDetails(mCodes.get(mCodeIndex)) + "\n" + createPassengerString(amd.getPassengerList(mCodes.get(mCodeIndex))));// output string with flight information and passengers on board
                }
            }
        });
        jpViewFlightRecords.add(scrollList);

        description = new JTextArea(amd.maxMRs, 20);
        jpViewFlightRecords.add(description);

        clearRecord = new JButton("Clear Record");
        clearRecord.addActionListener(this);
        jpViewFlightRecords.add(clearRecord);
        updateManagementRecordList();
    }
    
    /**
     * Takes in the PassengerList and creates the output string for RadarTransciever
     * @param pList
     * @return String for output
     */
    private String createPassengerString(PassengerList pList) {
    	Vector<PassengerDetails> details = pList.getPassengerNames();
    	String names = "\nPassenger Names:";
    	for(int i = 0; i < details.size(); i++) {
    		names = names +"\n"+ details.get(i).getName();
    	}
    	return names;
    }

    /*
        Called when notified of change by the AircraftManagementDatabase
     */
    @Override
    public void update(Observable o, Object arg) {
        managementRecordList.setSelectedIndex(-1);
        description.setText("");

        updateManagementRecordList();
    }

    /*
        Set the JList data to that of the current passenger list
     */
    private void updateAddedPassengersList() {
        if (passengers != null) {
            Vector<PassengerDetails> passengerList = passengers.getPassengerNames(); // Get list of in-stock items in

            addedPassengersList.setListData(passengerList); // Replace the entire contents of stockList in one step
        }
    }

    /*
        Retrieve all ManagementRecords with relevant statuses
        and update JList
     */
    private void updateManagementRecordList() {
        mCodes.clear();
        mCodes.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.IN_TRANSIT)));
        mCodes.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.WANTING_TO_LAND)));
        mCodes.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.DEPARTING_THROUGH_LOCAL_AIRSPACE)));

        String[] flightCodes = new String[mCodes.size()];
        for (int i = 0; i < flightCodes.length; i++) {
            flightCodes[i] = amd.getFlightCode(mCodes.get(i)) + ": " + amd.getStatusString(mCodes.get(i));
        }
        managementRecordList.setListData(flightCodes);
        //Update list interface
        managementRecordList.updateUI();
    }

    @Override
    public void actionPerformed(ActionEvent evn) {
        if (evn.getSource() == addPassengerBtn) {
            addPassenger();
        } else if (evn.getSource() == deletePassengerBtn) {
            deletePassenger();
        } else if (evn.getSource() == addFlightDescriptor) {
            uploadFlightDescriptor();
        } else if (evn.getSource() == clearRecord) {
            clearRecord();
        }
    }

    /*
        Adds a passenger to to PassengerList
     */
    private void addPassenger() {
        if (!(passengers.maxCapacity())) {
            String name = addPassengerTf.getText();
            // Only accept characters a-zA-z and spaces
            if (name.matches("[a-zA-Z ]+")) {
                PassengerDetails details = new PassengerDetails(name);
                passengers.addPassenger(details);
                updateAddedPassengersList();
                
                JOptionPane.showMessageDialog(this, "Passenger Added");
                addPassengerTf.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Invalid input for passenger name");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Aircraft has reached max capacity");
        }
    }

    /*
        Deletes the selected passenger from the current PassengerList
     */
    private void deletePassenger() {
        if (addedPassengersList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "No passenger selected.");
        } else {
            passengers.removePassenger(addedPassengersList.getSelectedIndex());
            updateAddedPassengersList();
        }
    }

    /*
        Uploads a flight descriptor to the AircraftManagementDatabase
     */
    private void uploadFlightDescriptor() {
        String flightCode = flightCodeTf.getText();
        if (!(flightCode.matches("[a-zA-Z0-9]+"))) {
            JOptionPane.showMessageDialog(this, "Invalid flight code");
        } else {
            String to = toTf.getText();
            String from = fromTf.getText();
            String next = nextTf.getText();

            if (!(to.matches("[a-zA-Z ]+")) || !(from.matches("[a-zA-Z ]+")) || !(next.matches("[a-zA-Z ]+"))) {
                JOptionPane.showMessageDialog(this, "Invalid itinerary description");
            } else {
                Itinerary it = new Itinerary(from, to, next);
                FlightDescriptor fd = new FlightDescriptor(flightCode, it, passengers);
                boolean added = amd.radarDetect(fd);

                passengers = new PassengerList();
                updateAddedPassengersList();
                
                if(added)JOptionPane.showMessageDialog(this, "Flight Added");
                else JOptionPane.showMessageDialog(this, "Max Mrs reached");
                flightCodeTf.setText("");
                toTf.setText("");
                fromTf.setText("");
                nextTf.setText("");
            }
        }
    }

    /*
        Clears a record in the AircraftManagementDatabase setting it's state to Free
     */
    private void clearRecord() {
        if (managementRecordList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "No passenger selected.");
        } else {
            amd.radarLostContact(mCodes.get(managementRecordList.getSelectedIndex()));
            description.setText("");
            this.updateManagementRecordList();
        }
    }
}
