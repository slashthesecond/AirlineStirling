import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

// Generated by Together

/**
 * An interface to SAAMS: Radar tracking of arriving and departing aircraft, and
 * transceiver for downloading of flight descriptors (by aircraft entering the
 * local airspace) and uploading of passenger lists (to aircraft about to
 * depart). A screen simulation of the radar/transceiver system. This class is a
 * controller for the AircraftManagementDatabase: it sends messages to notify
 * when a new aircraft is detected (message contains a FlightDescriptor), and
 * when radar contact with an aircraft is lost. It also registers as an observer
 * of the AircraftManagementDatabase, and is notified whenever any change occurs
 * in that <<model>> element. See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node167
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class RadarTransceiver extends JFrame implements Observer, ActionListener {
	/**
	 * The Radar Transceiver interface has access to the AircraftManagementDatabase.
	 * 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase aircraftManagementDB;
	
	JLabel flightCodeLb;
	JTextField flightCodeTf;

	JLabel fromLb;
	JComboBox<String> fromCb;

	JLabel toLb;
	JComboBox<String> toCb;

	JLabel nextLb;
	JComboBox<String> nextCb;

	JLabel addPassengerLb;
	JTextField addPassengerTf;
	JButton addPassengerBtn;

	JButton addFlightDescriptor;

	public RadarTransceiver(AircraftManagementDatabase aircraftManagemnetDatabase) {
		setUpPanel1();
		aircraftManagemnetDatabase.addObserver(this);
		this.aircraftManagementDB = aircraftManagemnetDatabase;
	}

	private void setUpPanel1() {
		setTitle("Tabbed Pane");
		setVisible(true);
		setSize(400, 350);
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		JTabbedPane jtp = new JTabbedPane();
		getContentPane().add(jtp);
		JPanel jpEnterFlightRecord = new JPanel();
		JPanel jpViewPassengers = new JPanel();
		JPanel jpViewFlightRecords = new JPanel();

		flightCodeLb = new JLabel("Enter flight code: ");
		jpEnterFlightRecord.add(flightCodeLb);
		flightCodeTf = new JTextField(20);
		jpEnterFlightRecord.add(flightCodeTf);

		fromLb = new JLabel("From: ");
		jpEnterFlightRecord.add(fromLb);
		String[] from = { "Stirling", "Glasgow", "Edinburgh", "Aberdeen" };
		fromCb = new JComboBox<String>(from);
		jpEnterFlightRecord.add(fromCb);

		toLb = new JLabel("To: ");
		jpEnterFlightRecord.add(toLb);
		String[] to = { "Stirling", "Glasgow", "Edinburgh", "Aberdeen" };
		toCb = new JComboBox<String>(to);
		jpEnterFlightRecord.add(toCb);

		fromLb = new JLabel("Next: ");
		jpEnterFlightRecord.add(fromLb);
		String[] next = { "Stirling", "Glasgow", "Edinburgh", "Aberdeen" };
		nextCb = new JComboBox<String>(next);
		jpEnterFlightRecord.add(nextCb);

		addPassengerLb = new JLabel("Add Passenger: ");
		jpEnterFlightRecord.add(addPassengerLb);
		addPassengerTf = new JTextField(20);
		jpEnterFlightRecord.add(addPassengerTf);

		addPassengerBtn = new JButton("Add");
		addPassengerBtn.addActionListener(this);
		jpEnterFlightRecord.add(addPassengerBtn);

		addFlightDescriptor = new JButton("Add Flight Descriptor");
		addFlightDescriptor.addActionListener(this);
		jpEnterFlightRecord.add(addFlightDescriptor);

		// jpEnterFlightRecord.add(label1);

		// pViewPassengers.add(label2);

		// jpViewFlightRecords.add(label3);

		jtp.addTab("Enter Flight Record", jpEnterFlightRecord);
		jtp.addTab("View Passengers", jpViewPassengers);
		jtp.addTab("View Records", jpViewFlightRecords);
	}

	@Override
	public void actionPerformed(ActionEvent evn) {
		if (evn.getSource() == addPassengerBtn) {

		}
		if (evn.getSource() == addFlightDescriptor) {

		}

	}

	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub

	}

}
