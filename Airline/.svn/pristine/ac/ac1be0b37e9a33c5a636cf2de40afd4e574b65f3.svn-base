import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

// Generated by Together
// Edited by Nganga Njiraini

/**
 * An interface to SAAMS:
 * Maintenance Inspector Screen:
 * Inputs events from the Maintenance Inspector, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements Observer, ActionListener{
/**  The Maintenance Inspector Screen interface has access to the AircraftManagementDatabase.
  * @clientCardinality 1
  * @supplierCardinality 1
  * @label accesses/observes
  * @directed*/
  private AircraftManagementDatabase aircraftManagementDB;
  

  private JList<String> maintainListView;
  private JScrollPane mScroll;
  private DefaultListModel<String> maintainList;
  private JLabel lblCleanMaintain;
  private JLabel lblMaintain;
  private JLabel lblFault;
  private JCheckBox faultCheck;
  private JTextArea faultDescription;
  private JButton completeMaintenance;
  
  public MaintenanceInspector(AircraftManagementDatabase aircraftManagemnetDatabase) {
	aircraftManagemnetDatabase.addObserver(this);
	this.aircraftManagementDB = aircraftManagemnetDatabase;
	
	initGUI();
  }
  
  private void initGUI() {
	  setTitle("Maintenance Inspector");
	  setVisible(true);
	  setSize(550, 350);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
	  
	  JPanel maintainPanel = new JPanel();
	  maintainPanel.setLayout(new BoxLayout(maintainPanel, BoxLayout.PAGE_AXIS));
	  maintainPanel.add(Box.createRigidArea(new Dimension(0,5)));
	  
	  lblMaintain = new JLabel("Ready for Maintenance");
	  maintainListView = new JList();
	  DefaultListModel maintainList = new DefaultListModel();
	  mScroll = new JScrollPane(maintainListView);
	  maintainListView.setVisibleRowCount(aircraftManagementDB.maxMRs);
	  maintainPanel.add(lblMaintain);
	  maintainPanel.add(mScroll);
	  
	  JPanel faultPanel = new JPanel();
	  faultPanel.add(Box.createRigidArea(new Dimension(10, 0)));
	  faultPanel.add(Box.createHorizontalGlue());
	  faultPanel.setLayout(new BoxLayout(faultPanel, BoxLayout.LINE_AXIS));
	  lblFault = new JLabel("Faulty?");
	  faultCheck = new JCheckBox();
	  faultDescription  = new JTextArea(5, 20);
	  faultPanel.add(lblFault);
	  faultPanel.add(faultCheck);
	  faultPanel.add(faultDescription);
	  
	  completeMaintenance = new JButton("Complete Maintenance");
	  faultPanel.add(completeMaintenance);
	  
	  Container contentPane = getContentPane();
	  contentPane.add(maintainPanel, BorderLayout.CENTER);
	  contentPane.add(faultPanel, BorderLayout.PAGE_END);
  }
  
  @Override
  public void actionPerformed(ActionEvent arg0) {
	  
	  
  }
  @Override
  public void update(Observable arg0, Object arg1) {
	// ManagementRecord.AWAIT_REPAIR ManagementRecord.
		
			System.out.println("I received the update request.");

			ArrayList<Integer> results = new ArrayList<>();

			for (int i = 0; i < aircraftManagementDB.maxMRs; i++) {
				int currentStatus = aircraftManagementDB.getStatus(i);

				// if(currentStatus == ManagementRecord.AWAIT_REPAIR || currentStatus ==
				// ManagementRecord.DEPARTING_THROUGH_LOCAL_AIRSPACE) {
				maintainList.addElement(aircraftManagementDB.getFlightCode(i));
			}
  }
  
}
