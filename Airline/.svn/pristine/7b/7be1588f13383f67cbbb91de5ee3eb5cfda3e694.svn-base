import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together
// Edited by Nganga Njiraini

/**
 * An interface to SAAMS:
 * Maintenance Inspector Screen:
 * Inputs events from the Maintenance Inspector, and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:node:::id4tg7xcko4qme4cko4swuu.node146
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id4tg7xcko4qme4cko4swuu
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 */
public class MaintenanceInspector extends JFrame implements Observer, ActionListener{
	/**  The Maintenance Inspector Screen interface has access to the AircraftManagementDatabase. 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed*/
  private AircraftManagementDatabase amd;
  /** The GateConsole interface has access to the GateInfoDatabase.* 
	 * @supplierCardinality 1
	 * @clientCardinality 0..*
	 * @label accesses/observes
	 * @directed
	 */
  private GateInfoDatabase gid;
  
  private ArrayList<Integer> mCodes;
  private JTabbedPane tabPanel;
  
  private JLabel lblMaintain;
  private JList<String> maintainList;
  private JScrollPane mScroll;
  private JLabel lblInfo;
  
  private JButton showStatus;
  private JTextArea AircraftStatus;
  
  private JLabel lblFault;
  private JCheckBox faultCheck;
  private JTextArea faultDescription;
  private JButton completeMaintenance;
  
  public MaintenanceInspector(AircraftManagementDatabase amd) {
	  mCodes = new ArrayList<Integer>();
	  amd.addObserver(this);
	  this.amd = amd;
	  initGUI();
  }
  
  private void initGUI() {
	  tabPanel = new JTabbedPane();
	  getContentPane().add(tabPanel);
	  initTab1();
	  initTab2();
	  
	  setTitle("Maintenance Inspector");
	  setVisible(true);
	  setSize(550, 350);
	  setLocation(650, 600);
	  setDefaultCloseOperation(EXIT_ON_CLOSE);
  }
  
  private void initTab1() {
	  JPanel maintainPanel = new JPanel();
	  maintainPanel.setLayout(new BoxLayout(maintainPanel, BoxLayout.PAGE_AXIS));
	  maintainPanel.add(Box.createRigidArea(new Dimension(0,5)));
	  
	  lblMaintain = new JLabel("Ready for Maintenance");
	  maintainList = new JList<String>(new DefaultListModel<String>());
	  mScroll = new JScrollPane(maintainList);
	  maintainList.setVisibleRowCount(amd.maxMRs);
	  maintainList.addListSelectionListener(new ListSelectionListener() {

		@Override
		public void valueChanged(ListSelectionEvent arg0) {
			if(!(maintainList.getSelectedIndex() == -1)) {
				int i = maintainList.getSelectedIndex();
				AircraftStatus.setText(amd.getRecordDetails(mCodes.get(i)));
			}
		} 
	  });
	  
	  lblInfo = new JLabel("Aircraft Info");
	  AircraftStatus = new JTextArea();
	  maintainPanel.add(lblMaintain);
	  maintainPanel.add(mScroll);
	  maintainPanel.add(lblInfo);
	  maintainPanel.add(AircraftStatus);
	  
	  JPanel faultPanel = new JPanel();
	  faultPanel.add(Box.createRigidArea(new Dimension(10, 0)));
	  faultPanel.add(Box.createHorizontalGlue());
	  faultPanel.setLayout(new BoxLayout(faultPanel, BoxLayout.LINE_AXIS));
	  lblFault = new JLabel("Faulty?");
	  faultCheck = new JCheckBox();
	  faultDescription  = new JTextArea(5, 5);
	  faultPanel.add(lblFault);
	  faultPanel.add(faultCheck);
	  faultPanel.add(faultDescription);
	  
	  completeMaintenance = new JButton("Complete Maintenance");
	  completeMaintenance.addActionListener(this);
	  maintainPanel.add(completeMaintenance);
	  
	  JPanel panel = new JPanel();
	  panel.setLayout(new GridLayout(1, 2));
	  panel.add(maintainPanel);
	  panel.add(faultPanel);
	  tabPanel.addTab("Maintenance", panel);
  }
  
  private void initTab2() {
	  
	  
	  
  }
  
  @Override
  public void actionPerformed(ActionEvent evn) {
	  if (evn.getSource() == completeMaintenance) {
		  int index = maintainList.getSelectedIndex();
		  if (maintainList.getSelectedIndex() == -1) {
			  AircraftStatus.setText("Please select an Aircraft");
		  } 
		  if (amd.getStatus(mCodes.get(index)) == ManagementRecord.READY_CLEAN_AND_MAINT) {
			  amd.setStatus(mCodes.get(index), ManagementRecord.OK_AWAIT_CLEAN);
		  } else if (amd.getStatus(mCodes.get(index)) == ManagementRecord.CLEAN_AWAIT_MAINT) {
			  amd.setStatus(mCodes.get(index), ManagementRecord.READY_REFUEL);
		  }
	  }
  }
  
  @Override
  public void update(Observable arg0, Object arg1) {
	  updateMaintenanceList();
  }
  
  private void updateMaintenanceList() {
	  mCodes.clear();
	  mCodes.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.READY_CLEAN_AND_MAINT)));
	  mCodes.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.CLEAN_AWAIT_MAINT)));
	  
	  String[] flightCodes = new String[mCodes.size()];
	  for(int i = 0; i < mCodes.size(); i++) {
		  flightCodes[i] = amd.getFlightCode(mCodes.get(i)) + " :" +amd.getStatusString(mCodes.get(i)); 
	  }
	  
	  maintainList.setListData(flightCodes);
	  maintainList.updateUI();
  }
  
}
