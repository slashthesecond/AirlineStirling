import java.awt.FlowLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together


/**
 * An interface to SAAMS:
 * Local Air Traffic Controller Screen:
 * Inputs events from LATC (a person), and displays aircraft information.
 * This class is a controller for the AircraftManagementDatabase: sending it messages to change the aircraft status information.
 * This class also registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 * @url element://model:project::SAAMS/design:view:::id2fh3ncko4qme4cko4swe5
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 */
public class LATC extends JFrame implements Observer, ActionListener {
    /**
     * The Local Air Traffic Controller Screen interface has access to the AircraftManagementDatabase.
     *
     * @supplierCardinality 1
     * @clientCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    private JButton nextStateButton;
    private JTextArea flightDescriptionArea = new JTextArea(6, 35);

    private ArrayList<Integer> mCodeList;
    private JList<String> flightCodeList;

    public LATC(AircraftManagementDatabase aircraftManagementDatabase) {
        aircraftManagementDatabase.addObserver(this);
        this.aircraftManagementDatabase = aircraftManagementDatabase;
        initGUI();
    }

    private void initGUI() {
        setTitle("LATC");
        setSize(400, 390);
        setLocation(550, 10);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);


        JPanel jpLATC = new JPanel();
        getContentPane().add(jpLATC);
        jpLATC.setLayout(new FlowLayout());

        JLabel flightCodeListLb = new JLabel("Aircraft List");
        jpLATC.add(flightCodeListLb);

        flightCodeList = new JList<String>(new DefaultListModel<String>());
        flightCodeList.setFixedCellWidth(350);
        flightCodeList.setVisibleRowCount(aircraftManagementDatabase.maxMRs);
        flightCodeList.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent arg0) {
                if (!(flightCodeList.getSelectedIndex() == -1)) {
                    int i = flightCodeList.getSelectedIndex();
                    flightDescriptionArea.setText(aircraftManagementDatabase.getRecordDetails(mCodeList.get(i)));
                }

            }
        });
        JScrollPane scrollList = new JScrollPane(flightCodeList);
        jpLATC.add(scrollList);

        nextStateButton = new JButton("Next Phase");
        nextStateButton.addActionListener(this);
        jpLATC.add(nextStateButton);

        jpLATC.add(flightDescriptionArea);

        setVisible(true);

    }

    @Override
    public void actionPerformed(ActionEvent evn) {

        if (evn.getSource() == nextStateButton) { 
            if (flightCodeList.getSelectedIndex() == -1) //Checks if aircraft selected
                JOptionPane.showMessageDialog(this, "Please select an Aircraft");
            else {
                int mCode = mCodeList.get(flightCodeList.getSelectedIndex());
                int statusCode = aircraftManagementDatabase.getStatus(mCode);
                
                if (statusCode == ManagementRecord.GROUND_CLEARANCE_GRANTED  //Finds if status applies to LATC
                        || statusCode == ManagementRecord.LANDING
                        || statusCode == ManagementRecord.READY_DEPART
                        || statusCode == ManagementRecord.AWAITING_TAKEOFF) {
                	
                	//Changes status and display
                    aircraftManagementDatabase.setStatus(mCode, statusCode + 1);
                    flightDescriptionArea.setText("Successfully changed status.");
                    
                } else {
                    JOptionPane.showMessageDialog(this, "LATC does not have permission to  \nchange the status of flights in phase: \n" + aircraftManagementDatabase.getStatusString(mCode));
                }
            }
        }

    }

    
    @Override
    public void update(Observable o, Object arg) {
        mCodeList = getLATCmCodes();
        String[] flightCodes = new String[mCodeList.size()];
        for (int i = 0; i < mCodeList.size(); i++) {
            flightCodes[i] = aircraftManagementDatabase.getFlightCode(mCodeList.get(i)) + " - " + aircraftManagementDatabase.getStatusString(mCodeList.get(i));
        }


        flightCodeList.setListData(flightCodes);
        // Update size of display
        flightCodeList.updateUI();

    }

    /**
     * Gets all mCodes that have a status relevant to LATC
     * @return ArrayList<Integer> the mCodes relevant to LATc
     */
    private ArrayList<Integer> getLATCmCodes() {
        ArrayList<Integer> mCodes = new ArrayList<Integer>();

        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.IN_TRANSIT)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_DEPART)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAITING_TAXI)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAITING_TAKEOFF)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.DEPARTING_THROUGH_LOCAL_AIRSPACE)));


        return mCodes;
    }

}
