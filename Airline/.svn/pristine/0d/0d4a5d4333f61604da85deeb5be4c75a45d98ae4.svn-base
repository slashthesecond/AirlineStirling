// Generated by Together


/**
 * Contains an array of PassengerDetails objects - one per passenger on a flight.
 * Incoming flights supply their passenger list in their flight descriptor, and the ManagementRecord for the flight extracts the PassengerList and holds it separately.
 * Outbound flights have PassengerLists built from passenger details supplied by the gate consoles, and the list is uploaded to the aircraft as it departs in a newly built FlightDescriptor.
 * @stereotype entity
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 */
public class PassengerList {
  /**
 * The array of PassengerDetails objects.
 * @byValue
 * @clientCardinality 1
 * @directed true
 * @label contains
 * @shapeType AggregationLink
 * @supplierCardinality 0..*
 */
  private PassengerDetails[] details;
  
  //Where the next passenger will be added to details array 
  private int addIndex;
  
  
  public PassengerList() {
	  //Assuming 100 is the average number of passengers on a plane
	  this.details = new PassengerDetails[100];
	  
	  this.addIndex = 0;
  }

/**
 * The given passenger is boarding.
 * Their details are recorded, in the passenger list.
 * @preconditions Status is READY_PASSENGERS
 */
  public void addPassenger(PassengerDetails details){
	  //No need to resize
	  if(!(this.addIndex > this.details.length-1) ) {
		  this.details[addIndex] = details;
		  this.addIndex ++;
	  }
	  //Resize
	  else {
		  //Temporary array to hold contents of details
		  PassengerDetails[] temp = this.details;
		  //Double the size of details
		  this.details = new PassengerDetails[this.details.length * 2];
		  //Copy passenger details back into details
		  for(int i = 0; i < temp.length; i++) {
			  this.details[i] = temp[i];
		  }
		  //Add new passenger
		  this.details[addIndex] = details;
	  }
	  
  }
}
