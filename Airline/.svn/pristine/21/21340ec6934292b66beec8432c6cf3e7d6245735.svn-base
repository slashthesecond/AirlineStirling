import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import java.util.stream.IntStream;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together

/**
 * An interface to SAAMS: Radar tracking of arriving and departing aircraft, and
 * transceiver for downloading of flight descriptors (by aircraft entering the
 * local airspace) and uploading of passenger lists (to aircraft about to
 * depart). A screen simulation of the radar/transceiver system. This class is a
 * controller for the AircraftManagementDatabase: it sends messages to notify
 * when a new aircraft is detected (message contains a FlightDescriptor), and
 * when radar contact with an aircraft is lost. It also registers as an observer
 * of the AircraftManagementDatabase, and is notified whenever any change occurs
 * in that <<model>> element. See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node167
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class RadarTransceiver extends JFrame implements Observer, ActionListener {
	/**
	 * The Radar Transceiver interface has access to the AircraftManagementDatabase.
	 * 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase amd;

	/*
	 * GUI components
	 */
	private JTabbedPane jtp;


	private JTextField flightCodeTf;

	private JTextField fromTf;

	private JTextField toTf;

	private JTextField nextTf;

	private JTextField addPassengerTf;
	private JButton addPassengerBtn;
	private JButton deletePassengerBtn;
	private JList<PassengerDetails> addedPassengersList;
	private JScrollPane scrollList;

	JButton addFlightDescriptor;

	private JList<String>managementRecordList;
	private JTextArea description;
	private JButton clearRecord;

	/*
	 * List of passengers for current flight descriptor
	 */
	private PassengerList passengers;
	
    ArrayList<Integer> mrs;
    
	public RadarTransceiver(AircraftManagementDatabase aircraftManagementDatabase) {
		mrs = new ArrayList<Integer>();
		passengers = new PassengerList();
		aircraftManagementDatabase.addObserver(this);
		this.amd = aircraftManagementDatabase;

		initGUI();
	}

	private void initGUI() {
		setTitle("Radar Transciever");
		setVisible(true);
		setSize(550, 300);
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		jtp = new JTabbedPane();
		getContentPane().add(jtp);

		initPanel1();
		initPanel2();
	}

	private void initPanel1() {
		JPanel jpEnterFlightRecord = new JPanel();
		jpEnterFlightRecord.setLayout(new FlowLayout());

		JLabel flightCodeLb = new JLabel("Flight code: ");
		jpEnterFlightRecord.add(flightCodeLb);

		flightCodeTf = new JTextField(5);
		jpEnterFlightRecord.add(flightCodeTf);

		JLabel fromLb = new JLabel("From: ");
		jpEnterFlightRecord.add(fromLb);

		fromTf = new JTextField(5);
		jpEnterFlightRecord.add(fromTf);

		JLabel toLb = new JLabel("To: ");
		jpEnterFlightRecord.add(toLb);
	
		toTf = new JTextField(5);
		jpEnterFlightRecord.add(toTf);

		fromLb = new JLabel("Next: ");
		jpEnterFlightRecord.add(fromLb);

		nextTf = new JTextField(5);
		jpEnterFlightRecord.add(nextTf);

		JLabel addPassengerLb = new JLabel("Passenger: ");
		jpEnterFlightRecord.add(addPassengerLb);
		addPassengerTf = new JTextField(20);
		jpEnterFlightRecord.add(addPassengerTf);

		deletePassengerBtn = new JButton("Delete");
		deletePassengerBtn.addActionListener(this);
		jpEnterFlightRecord.add(deletePassengerBtn);
		addPassengerBtn = new JButton("Add");
		addPassengerBtn.addActionListener(this);
		jpEnterFlightRecord.add(addPassengerBtn);

		addedPassengersList = new JList<PassengerDetails>(new DefaultListModel<PassengerDetails>());
		addedPassengersList.setFixedCellWidth(300); //Stops resizing when changing tabs
		scrollList = new JScrollPane(addedPassengersList);
		addedPassengersList.setVisibleRowCount(5);
		jpEnterFlightRecord.add(scrollList);
		updateAddedPassengersList();

		addFlightDescriptor = new JButton("Finish Flight Descriptor");
		addFlightDescriptor.addActionListener(this);
		jpEnterFlightRecord.add(addFlightDescriptor);

		jtp.addTab("Enter Flight Record", jpEnterFlightRecord);
	}

	private void initPanel2() {
		JPanel jpViewFlightRecords = new JPanel();
		jtp.addTab("Flight records", jpViewFlightRecords);

		managementRecordList = new JList<String>(new DefaultListModel<>());
		scrollList = new JScrollPane(managementRecordList);
		managementRecordList.setVisibleRowCount(amd.maxMRs);
		managementRecordList.setFixedCellWidth(150); //Stops resizing when changing tabs
		managementRecordList.addListSelectionListener(new ListSelectionListener() {

			@Override
			public void valueChanged(ListSelectionEvent arg0) {
				if(!(managementRecordList.getSelectedIndex() == -1)) {
					int i = managementRecordList.getSelectedIndex();
					description.setText(amd.getRecordDetails(mrs.get(i)));
				}

			}
        });
		jpViewFlightRecords.add(scrollList);

		description = new JTextArea(amd.maxMRs, 20);
		jpViewFlightRecords.add(description);
		
		clearRecord = new JButton("Clear Record");
		clearRecord.addActionListener(this);
		jpViewFlightRecords.add(clearRecord);
		updateManagementRecordList();
	}

	private void updateAddedPassengersList() {
		if (passengers != null) {
			Vector<PassengerDetails> passengerList = passengers.getPassengerNames(); // Get list of in-stock items in the DB
			addedPassengersList.setListData(passengerList); // Replace the entire contents of stockList in one step
		}
	}

	private void updateManagementRecordList() {
		managementRecordList.setSelectedIndex(-1);
		description.setText("");
		
		mrs.clear();
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.IN_TRANSIT)));
		mrs.addAll(Arrays.asList(amd.getWithStatus(ManagementRecord.WANTING_TO_LAND)));
	    
	    String[] flightCodes = new String[mrs.size()];
	    for(int i = 0; i < flightCodes.length; i++) {
	    	flightCodes[i] = amd.getFlightCode(mrs.get(i)) +": " + amd.getStatusString(mrs.get(i));
	    }
		managementRecordList.setListData(flightCodes);
		// Update size of display
		managementRecordList.updateUI();
	}

	@Override
	public void actionPerformed(ActionEvent evn) {
		if (evn.getSource() == addPassengerBtn) {
			if (passengers.maxCapacity()) {
				String name = addPassengerTf.getText();
				// Only accept characters a-z and spaces /
				if (name.matches("[a-zA-Z ]+")) {
					PassengerDetails details = new PassengerDetails(name);
					passengers.addPassenger(details);
					updateAddedPassengersList();
				} else
					JOptionPane.showMessageDialog(this, "Invalid input for customer name");
			} else {
				JOptionPane.showMessageDialog(this, "Aircraft has reached max capacity");
			}
		}
		
		if(evn.getSource() == deletePassengerBtn) {
			if(addedPassengersList.getSelectedIndex() == -1) {
				JOptionPane.showMessageDialog(this, "No passenger selected.");
			}
			else {
				passengers.removePassenger(addedPassengersList.getSelectedIndex());
				updateAddedPassengersList();
			}
		}

		if (evn.getSource() == addFlightDescriptor) {
				String flightCode = flightCodeTf.getText();
				if(!(flightCode.matches("[a-zA-Z0-9]+"))) {
					JOptionPane.showMessageDialog(this,"Invalid flight code");
				}
				else {
					String to = toTf.getText();
					String from = fromTf.getText();
					String next = nextTf.getText();
					
					if(!(to.matches("[a-zA-Z]+")) || !(from.matches("[a-zA-Z]+")) || !(next.matches("[a-zA-Z]+")) ){
						JOptionPane.showMessageDialog(this,"Invalid itinerary description");
					}
					else {
						Itinerary it = new Itinerary(from, to, next);
						FlightDescriptor fd = new FlightDescriptor(flightCode, it, passengers);
						amd.radarDetect(fd);
					}
				}
		}
			
		if(evn.getSource() == clearRecord) {
			if(managementRecordList.getSelectedIndex() == -1) {
				JOptionPane.showMessageDialog(this, "No passenger selected.");
			}
			else {
				amd.radarLostContact(managementRecordList.getSelectedIndex());
				description.setText("");
				this.updateManagementRecordList();
			}
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		updateManagementRecordList();
	}

}
