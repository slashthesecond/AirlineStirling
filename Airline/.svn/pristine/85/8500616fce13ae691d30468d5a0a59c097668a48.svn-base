import java.awt.Color;
import java.awt.Dimension;
import java.awt.List;
import java.awt.ScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together
/**
 * An interface to SAAMS: Cleaning Supervisor Screen: Inputs events from the
 * Cleaning Supervisor, and displays aircraft information. This class is a
 * controller for the AircraftManagementDatabase: sending it messages to change
 * the aircraft status information. This class also registers as an observer of
 * the AircraftManagementDatabase, and is notified whenever any change occurs in
 * that <<model>> element. See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer, ActionListener {

	/**
	 * The Cleaning Supervisor Screen interface has access to the
	 * AircraftManagementDatabase.
	 * 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase aircraftManagementDatabase;;

	JLabel AttentionCheckLb;
	JTextArea attentionTa;
	JLabel GateNoLb;
	JTextArea GateNoTa;
	JLabel StatusLb;
	JTextArea StatusTa;
	DefaultListModel<String> listModel;
	JList<ManagementRecord> list;
	JScrollPane scrollList;
	String currentCode;
	JButton cleaned;

	private AircraftManagementDatabase aircraftManagementDB;

	public CleaningSupervisor(AircraftManagementDatabase aircraftManagemnetDatabase) {
		setUpCSpanel();
		aircraftManagemnetDatabase.addObserver(this);
		this.aircraftManagementDB = aircraftManagemnetDatabase;
	}

	private void setUpCSpanel() {
		setUp();

		JPanel contentPanel = new JPanel();
		getContentPane().add(contentPanel);

		JLabel attentioncheckLb = new JLabel("Aircrafts that require attention: ");
		contentPanel.add(attentioncheckLb);
		attentionTa = new JTextArea();
		contentPanel.add(attentionTa);

		cleaned = new JButton("Mark as cleaned");
		cleaned.addActionListener(this);
		contentPanel.add(cleaned);

		listModel = new DefaultListModel<>();

		list = new JList<ManagementRecord>(new DefaultListModel<ManagementRecord>());
		list.setVisibleRowCount(10);

		list.setPreferredSize(new Dimension(300, 300));

		contentPanel.add(new JScrollPane(list));

		pack();

	}

	private void setUp() {
		setTitle("Cleaning Supervisor");
		setVisible(true);
		setSize(550, 300);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	
	@Override
	public void actionPerformed(ActionEvent e) {

		if (e.getSource() == cleaned) {
			if (list.getSelectedIndex() == -1) {
				JOptionPane.showMessageDialog(this, "Please select a plane to clean!");
			} else {
				// clean these
			}
		}
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		// TODO Auto-generated method stub

		markAsClean();
	}

	public void markAsClean() {
		listModel.removeAllElements();

		for (int i = 0; i < aircraftManagementDB.maxMRs; i++) {

			if (aircraftManagementDB.getStatus(i) == 11 || aircraftManagementDB.getStatus(i) == 9) { // These are the
																										// ones we want
																										// added to
																										// list/These
																										// say a plane
																										// is unclean
				listModel.addElement(aircraftManagementDB.getFlightCode(i) + " " + aircraftManagementDB.getStatus(i));
			}

		}

	}
}

// note to self:

// public static final int READY_CLEAN_AND_MAINT = 8; clean

// public static final int FAULTY_AWAIT_CLEAN = 9; dirty

// public static final int OK_AWAIT_CLEAN = 11; dirty

// public static final int CLEAN_AWAIT_MAINT = 10; clean
