import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.swing.*;

// Generated by Together

/**
 * An interface to SAAMS: Radar tracking of arriving and departing aircraft, and
 * transceiver for downloading of flight descriptors (by aircraft entering the
 * local airspace) and uploading of passenger lists (to aircraft about to
 * depart). A screen simulation of the radar/transceiver system. This class is a
 * controller for the AircraftManagementDatabase: it sends messages to notify
 * when a new aircraft is detected (message contains a FlightDescriptor), and
 * when radar contact with an aircraft is lost. It also registers as an observer
 * of the AircraftManagementDatabase, and is notified whenever any change occurs
 * in that <<model>> element. See written documentation.
 * 
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::idwwyucko4qme4cko4sgxi
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:node:::id3oolzcko4qme4cko4sx40.node167
 * @url element://model:project::SAAMS/design:view:::id3oolzcko4qme4cko4sx40
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class RadarTransceiver extends JFrame implements Observer, ActionListener {
	/**
	 * The Radar Transceiver interface has access to the AircraftManagementDatabase.
	 * 
	 * @clientCardinality 1
	 * @supplierCardinality 1
	 * @label accesses/observes
	 * @directed
	 */
	private AircraftManagementDatabase aircraftManagementDB;

	/*
	 * GUI components
	 */
	private JTabbedPane jtp;

	private String[] flightCodes = { "ST101", "GL305", "ED777", "AB021" };;
	private JComboBox<String> flightCodeCb;

	private JComboBox<String> fromCb;

	private JComboBox<String> toCb;

	private JComboBox<String> nextCb;

	private JTextField addPassengerTf;
	private JButton addPassengerBtn;
	private JButton deletePassengerBtn;
	private JList<PassengerDetails> addedPassengersList;
	private JScrollPane scrollList;

	JButton addFlightDescriptor;

	private JList<ManagementRecord>managementRecordList;
	private JTextArea description;
	private JButton showDetails;
	private JButton clearRecord;

	/*
	 * List of passengers for current flight descriptor
	 */
	private PassengerList passengers;

	public RadarTransceiver(AircraftManagementDatabase aircraftManagemnetDatabase) {
		passengers = new PassengerList();
		aircraftManagemnetDatabase.addObserver(this);
		this.aircraftManagementDB = aircraftManagemnetDatabase;

		initGUI();
	}

	private void initGUI() {
		setTitle("Radar Transciever");
		setVisible(true);
		setSize(550, 300);
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		jtp = new JTabbedPane();
		getContentPane().add(jtp);

		initPanel1();
		initPanel2();
	}

	private void initPanel1() {
		JPanel jpEnterFlightRecord = new JPanel();
		jpEnterFlightRecord.setLayout(new FlowLayout());

		JLabel flightCodeLb = new JLabel("Flight code: ");
		jpEnterFlightRecord.add(flightCodeLb);

		flightCodeCb = new JComboBox<String>(flightCodes);
		jpEnterFlightRecord.add(flightCodeCb);

		JLabel fromLb = new JLabel("From: ");
		jpEnterFlightRecord.add(fromLb);
		String[] from = { "Stirling", "Glasgow", "Edinburgh", "Aberdeen" };
		fromCb = new JComboBox<String>(from);
		jpEnterFlightRecord.add(fromCb);

		JLabel toLb = new JLabel("To: ");
		jpEnterFlightRecord.add(toLb);
		String[] to = { "Stirling", "Glasgow", "Edinburgh", "Aberdeen" };
		toCb = new JComboBox<String>(to);
		jpEnterFlightRecord.add(toCb);

		fromLb = new JLabel("Next: ");
		jpEnterFlightRecord.add(fromLb);
		String[] next = { "Stirling", "Glasgow", "Edinburgh", "Aberdeen" };
		nextCb = new JComboBox<String>(next);
		jpEnterFlightRecord.add(nextCb);

		JLabel addPassengerLb = new JLabel("Passenger: ");
		jpEnterFlightRecord.add(addPassengerLb);
		addPassengerTf = new JTextField(20);
		jpEnterFlightRecord.add(addPassengerTf);

		deletePassengerBtn = new JButton("Delete");
		deletePassengerBtn.addActionListener(this);
		jpEnterFlightRecord.add(deletePassengerBtn);
		addPassengerBtn = new JButton("Add");
		addPassengerBtn.addActionListener(this);
		jpEnterFlightRecord.add(addPassengerBtn);

		addedPassengersList = new JList<PassengerDetails>(new DefaultListModel<PassengerDetails>());
		addedPassengersList.setFixedCellWidth(300); //Stops resizing when changing tabs
		scrollList = new JScrollPane(addedPassengersList);
		addedPassengersList.setVisibleRowCount(5);
		jpEnterFlightRecord.add(scrollList);
		updateAddedPassengersList();

		addFlightDescriptor = new JButton("Finish Flight Descriptor");
		addFlightDescriptor.addActionListener(this);
		jpEnterFlightRecord.add(addFlightDescriptor);

		jtp.addTab("Enter Flight Record", jpEnterFlightRecord);
	}

	private void initPanel2() {
		JPanel jpViewFlightRecords = new JPanel();
		jtp.addTab("Flight records", jpViewFlightRecords);

		managementRecordList = new JList<ManagementRecord>(new DefaultListModel<ManagementRecord>());
		scrollList = new JScrollPane(managementRecordList);
		managementRecordList.setVisibleRowCount(aircraftManagementDB.maxMRs);
		jpViewFlightRecords.add(scrollList);
		updateManagementRecordList();

		description = new JTextArea(aircraftManagementDB.maxMRs, 20);
		jpViewFlightRecords.add(description);
		
		clearRecord = new JButton("Clear Record");
		clearRecord.addActionListener(this);
		jpViewFlightRecords.add(clearRecord);
		
		showDetails = new JButton("Show flight details");
		showDetails.addActionListener(this);
		jpViewFlightRecords.add(showDetails);

	}

	private void updateAddedPassengersList() {
		if (passengers != null) {
			Vector<PassengerDetails> passengerList = passengers.getPassengerNames(); // Get list of in-stock items in the DB
			addedPassengersList.setListData(passengerList); // Replace the entire contents of stockList in one step
		}
	}

	private void updateManagementRecordList() {
		ManagementRecord[] mrs = aircraftManagementDB.getMrs();
		managementRecordList.setListData(mrs);
		// Update size of display
		managementRecordList.updateUI();
	}

	@Override
	public void actionPerformed(ActionEvent evn) {
		if (evn.getSource() == addPassengerBtn) {
			if (passengers.maxCapacity()) {
				String name = addPassengerTf.getText();
				// Only accept characters a-z and spaces /
				if (name.matches("[a-zA-Z ]+")) {
					PassengerDetails details = new PassengerDetails(name);
					passengers.addPassenger(details);
					updateAddedPassengersList();
				} else
					JOptionPane.showMessageDialog(this, "Invalid input for customer name");
			} else {
				JOptionPane.showMessageDialog(this, "Aircraft has reached max capacity");
			}
		}
		
		if(evn.getSource() == deletePassengerBtn) {
			if(addedPassengersList.getSelectedIndex() == -1) {
				JOptionPane.showMessageDialog(this, "No passenger selected.");
			}
			else {
				passengers.removePassenger(addedPassengersList.getSelectedIndex());
				updateAddedPassengersList();
			}
		}

		if (evn.getSource() == addFlightDescriptor) {

				String flightCode = (String) flightCodeCb.getSelectedItem();
				String to = (String) toCb.getSelectedItem();
				String from = (String) toCb.getSelectedItem();
				String next = (String) toCb.getSelectedItem();
				Itinerary it = new Itinerary(to, from, next);
				FlightDescriptor fd = new FlightDescriptor(flightCode, it, passengers);
				
				aircraftManagementDB.radarDetect(fd);

		}

		if(evn.getSource() == showDetails){
			if(managementRecordList.getSelectedIndex() == -1)
				description.setText("Hit");
			else 
				description.setText(managementRecordList.getSelectedValue().getDetails());
        }
		
		if(evn.getSource() == clearRecord) {
			if(managementRecordList.getSelectedIndex() == -1) {
				JOptionPane.showMessageDialog(this, "No passenger selected.");
			}
			else {
				aircraftManagementDB.radarLostContact(managementRecordList.getSelectedIndex());
				this.updateManagementRecordList();
			}
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		updateManagementRecordList();
	}

}
