import java.awt.Color;
import java.awt.Dimension;
import java.awt.List;
import java.awt.ScrollPane;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Observable;
import java.util.Observer;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

// Generated by Together

/**
 * An interface to SAAMS: Cleaning Supervisor Screen: Inputs events from the
 * Cleaning Supervisor, and displays aircraft information. This class is a
 * controller for the AircraftManagementDatabase: sending it messages to change
 * the aircraft status information. This class also registers as an observer of
 * the AircraftManagementDatabase, and is notified whenever any change occurs in
 * that <<model>> element. See written documentation.
 *
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id3y5z3cko4qme4cko4sw81
 * @url element://model:project::SAAMS/design:node:::id15rnfcko4qme4cko4swib.node107
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class CleaningSupervisor extends JFrame implements Observer, ActionListener {

    /**
     * The Cleaning Supervisor Screen interface has access to the
     * AircraftManagementDatabase.
     *
     * @clientCardinality 1
     * @supplierCardinality 1
     * @label accesses/observes
     * @directed
     */
    private AircraftManagementDatabase aircraftManagementDatabase;

    private JList<String> list;
    private JButton cleaned;
    private JTextArea attentionTa;

    // Stores indexes
    private ArrayList<Integer> mCodes;

    private AircraftManagementDatabase aircraftManagementDB;

    private DefaultListModel model = new DefaultListModel();

    public CleaningSupervisor(AircraftManagementDatabase aircraftManagemnetDatabase) {
        setUpGUI();
        aircraftManagemnetDatabase.addObserver(this);
        this.aircraftManagementDB = aircraftManagemnetDatabase;

        mCodes = new ArrayList<Integer>();
    }

    /**
     * Initialize the interface
     */
    private void setUpGUI() {
        setTitle("Cleaning Supervisor");
        setVisible(true);
        setSize(550, 300);
        setLocation(10, 600);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        setUpCSPanel();
    }

    private void setUpCSPanel() {

        JPanel contentPanel = new JPanel();
        getContentPane().add(contentPanel);

        JLabel attentioncheckLb = new JLabel("Aircrafts that require attention: ");
        contentPanel.add(attentioncheckLb);
        attentionTa = new JTextArea();
        contentPanel.add(attentionTa);

        cleaned = new JButton("Mark as cleaned");
        cleaned.addActionListener(this);
        contentPanel.add(cleaned);

        list = new JList<String>(new DefaultListModel<String>());
        list.setVisibleRowCount(10);

        list.setPreferredSize(new Dimension(300, 300));

        contentPanel.add(new JScrollPane(list));

        pack();

    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource() == cleaned) {
            if (list.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Please select an aircraft");
            } else {
                int index = list.getSelectedIndex();
                int mCode = mCodes.get(index);
                int status = aircraftManagementDB.getStatus(mCode);
                if (status == ManagementRecord.OK_AWAIT_CLEAN) {
                    aircraftManagementDB.setStatus(mCode, ManagementRecord.READY_REFUEL);

                } else if (status == ManagementRecord.READY_CLEAN_AND_MAINT) {
                    aircraftManagementDB.setStatus(mCode, ManagementRecord.CLEAN_AWAIT_MAINT);
                } else if (status == ManagementRecord.FAULTY_AWAIT_CLEAN) {
                    aircraftManagementDB.setStatus(mCode, ManagementRecord.AWAIT_REPAIR);
                }
            }
        }
    }

    @Override
    public void update(Observable arg0, Object arg1) {
        list.setSelectedIndex(-1);
        attentionTa.setText("");
        updateManagementRecordList();
    }

    /**
     * Populate the managementRecordList with relevant ManagementRecords
     */
    private void updateManagementRecordList() {
        mCodes.clear();
        mCodes.addAll(Arrays.asList(aircraftManagementDB.getWithStatus(ManagementRecord.READY_CLEAN_AND_MAINT)));
        mCodes.addAll(Arrays.asList(aircraftManagementDB.getWithStatus(ManagementRecord.FAULTY_AWAIT_CLEAN)));
        mCodes.addAll(Arrays.asList(aircraftManagementDB.getWithStatus(ManagementRecord.OK_AWAIT_CLEAN)));

        String[] flightCodes = new String[mCodes.size()];
        for (int i = 0; i < flightCodes.length; i++) {
            flightCodes[i] = aircraftManagementDB.getFlightCode(mCodes.get(i)) + ": "
                    + aircraftManagementDB.getStatusString(mCodes.get(i));
        }
        list.setListData(flightCodes);
        // Update list interface
        list.updateUI();
    }

}