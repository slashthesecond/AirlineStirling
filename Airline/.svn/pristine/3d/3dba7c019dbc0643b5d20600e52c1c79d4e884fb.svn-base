import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.WindowConstants;

// Generated by Together


/**
 * An interface to SAAMS:
 * Public Information Screen:
 * Display of useful information about aircraft.
 * This class registers as an observer of the AircraftManagementDatabase, and is notified whenever any change occurs in that <<model>> element.
 * See written documentation.
 * @stereotype boundary/view
 * @url element://model:project::SAAMS/design:view:::id28ykdcko4qme4cko4sx0e
 * @url element://model:project::SAAMS/design:view:::id15rnfcko4qme4cko4swib
 */
public class PublicInfo extends JFrame implements Observer{
	/**
	  * Each Public Information Screen interface has access to the AircraftManagementDatabase.
	  * @supplierCardinality 1
	  * @clientCardinality 0..*
	  * @label accesses/observes
	  * @directed*/
	  private AircraftManagementDatabase aircraftManagementDatabase;
	  private ArrayList<Integer> mCodeList;
	  private String[][] displayStrings; // For use in JTable. 1 Column contains flight codes, the other statuses 
	  private JTable table;
	  
	  public PublicInfo(AircraftManagementDatabase aircraftManagementDatabase) {
		  aircraftManagementDatabase.addObserver(this);
		  this.aircraftManagementDatabase = aircraftManagementDatabase;
		  initGUI();
	  }
	  
	  /**
	   * Initialises GUI elements for PublicInfo
	   */
	  public void initGUI() {
		  
		  
		  setTitle("Public Flight Information");
	      setLocation(10, 310);
	      setSize(500,400);
	      setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
	      
	      JPanel jpPublicInfo = new JPanel();
	      getContentPane().add(jpPublicInfo);
	      
	      String[] columnHeaders = {"Flight", "Status"};
	      displayStrings = new String[aircraftManagementDatabase.maxMRs][2];//Where "2" is the number of columns
	      table = new JTable(displayStrings, columnHeaders);
	      
	      JScrollPane scrollPane = new JScrollPane(table);
	      jpPublicInfo.add(scrollPane);
	      
	      setVisible(true);
	  }

	@Override
	public void update(Observable o, Object arg) {
		
		for( int i = 0; i < displayStrings.length; i++ )
			   Arrays.fill(displayStrings[i], null );
		
		mCodeList = getPublicInfomCodes();
		
        for (int i = 0; i < mCodeList.size(); i++) {
        	/*
        	 * "0" Refers to flight code column and "1" refers to Status column
        	 */
        	displayStrings[i][0] = aircraftManagementDatabase.getFlightCode(mCodeList.get(i));
            displayStrings[i][1] = aircraftManagementDatabase.getStatusString(mCodeList.get(i));
            
            if(		//Abstracts each of set of Statuses for viewing in PublicInfo
            		displayStrings[i][1].equals("Wanting to land") ||
            		displayStrings[i][1].equals("Ground clearance granted") ||
            		displayStrings[i][1].equals("Landing") 
            		) {
            	
            	displayStrings[i][1] = "Landing";
            	
            }  else if(
            		displayStrings[i][1].equals("Landed") ||
            		displayStrings[i][1].equals("Taxiing") ||
            		displayStrings[i][1].equals("Unloading") 
            		) {
            	displayStrings[i][1] = "Landed";
            } else if(
            		displayStrings[i][1].equals("Ready for passenger boarding") 
            		) {
            	displayStrings[i][1] = "Boarding at Gate "+ (aircraftManagementDatabase.getGateNumber(mCodeList.get(i))+1); //Displays gate number beside status
            } else if(
            		displayStrings[i][1].equals("Ready to depart") 
            		) {
            	displayStrings[i][1] = "Flight Closed";
            } else if(
            		displayStrings[i][1].equals("Awaiting taxi") ||
            		displayStrings[i][1].equals("Awaiting takeoff")
            		) {
            	displayStrings[i][1] = "Flight Departing";
            } else if(
            		displayStrings[i][1].equals("Departing through local airspace")
            		) {
            	displayStrings[i][1] = "Flight Departed";
            }
            
           
        }
        
        //table.setListData(displayStrings);
        // Update size of display
        table.updateUI();

		
	}
	
	/**
	 * Returns ArrayList of all mCodes to be included in PublicInfo
	 */
	private ArrayList<Integer> getPublicInfomCodes(){
		ArrayList<Integer> mCodes = new ArrayList<Integer>();
	
		mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.WANTING_TO_LAND)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.GROUND_CLEARANCE_GRANTED)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.LANDED)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.TAXIING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.UNLOADING)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_PASSENGERS)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.READY_DEPART)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAITING_TAXI)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.AWAITING_TAKEOFF)));
        mCodes.addAll(Arrays.asList(aircraftManagementDatabase.getWithStatus(ManagementRecord.DEPARTING_THROUGH_LOCAL_AIRSPACE)));
        
        return mCodes;
	}

}
